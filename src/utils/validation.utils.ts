import { Request, Response } from "express";
import {
  validationResult,
  ValidationError,
  matchedData,
} from "express-validator";
import { StatusCodes } from "http-status-codes";

/**
 * @description maps ValidationError objects to a validation error message array.
 * 
 * @param { ValidationError[] } errors - 🔍 ValidationError array passed through from
 * the caller, which contains validation errors generated by validating the function's
 * input argument(s).
 * 
 * @returns { string } an object with a key-value pair of `validationErrors`, which
 * contains an array of messages related to validation errors.
 */
const formatErrorResponse = (errors: ValidationError[]) => ({
  validationErrors: errors.map((x) => x.msg),
});

/**
 * @description verifies the validity of a request by running it through a validation
 * routine, returning an error response if any issues are detected, and returning the
 * matching data if the request is valid.
 * 
 * @param { Request } req - HTTP request being validated.
 * 
 * @param { Response } res - response object, which is used to set the status code
 * and json-encoded error message for invalid requests.
 * 
 * @returns { array } an error response with a `UNPROCESSABLE_ENTITY` status code and
 * a JSON payload containing the validation errors.
 */
export const validateRequest = (req: Request, res: Response) => {
  const result = validationResult(req);

  if (!result.isEmpty()) {
    res
      .status(StatusCodes.UNPROCESSABLE_ENTITY)
      .json(formatErrorResponse(result.array()));
    return;
  }

  return matchedData(req);
};
